<div class="d-flex justify-content-between align-items-center mb-4">
  <h2 class="fw-bold">Início</h2>
  <span class="text-muted">Bem-vindo!</span>
</div>

<!-- Formulário -->
<div class="d-flex justify-content-center mt-4">
  <div class="card shadow-sm rounded-4 w-100" style="max-width: 80%;">
    <div class="card-body">
      <h4 class="mb-4">
        <i class="fas fa-search me-2 text-secondary"></i>Buscar Carros
      </h4>

      <form onsubmit="return false;">
        <div class="row g-3">
          <div class="col-md-5">
            <label for="marcas" class="form-label">Marca</label>
            <select class="form-select" id="marcas" name="marcas">
              <option selected value="0">-- Selecione uma marca --</option>
              <% @marcas.each do |marca| %>
                <option value="<%= marca.codigo %>"><%= marca.nome %></option>
              <% end %>
            </select>
          </div>

          <div class="col-md-5">
            <label for="modelos" class="form-label">Modelo</label>
            <select class="form-select" id="modelos" name="modelos" disabled>
              <option selected value="0">-- Selecione um modelo --</option>
            </select>
          </div>

          <div class="col-md-2 mt-auto">
            <button class="btn btn-primary" type="button"
                    id="submeter_pesquisa"
                    onclick="gerarTabelaFiltrada()">
              Buscar
            </button>
          </div>
        </div>
      </form>

    </div>
  </div>
</div>

<!-- Tabela -->
<div class="d-flex justify-content-center mt-4"
     id="tabela-veiculos-card" style="display: none;">
  <div class="card shadow-sm rounded-4 w-100" style="max-width: 80%;">
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-hover align-middle mb-0 table-striped">
          <thead class="table-light">
            <tr>
              <th>Código</th>
              <th>Nome</th>
              <th>Valor</th>
              <th>Combustível</th>
            </tr>
          </thead>
          <tbody id="tabela-veiculos-content"></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Gráfico -->
<div class="d-flex justify-content-center mt-4"
     id="grafico-veiculos-card" style="display: none;">
  <div class="card shadow-sm rounded-4 w-100" style="max-width: 80%;">
    <div class="card-body">
      <h5 class="mb-3 d-flex justify-content-between align-items-center">
        <span>
          <i class="fas fa-chart-bar me-2 text-secondary"></i>Preço por Ano
        </span>
        <span id="trend-indicator" class="badge rounded-pill fw-normal" style="font-size: 0.9rem;"></span>
      </h5>
      <canvas id="graficoAnoPreco" height="100"></canvas>
    </div>
  </div>
</div>

<% content_for :scripts do %>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const $ = (id) => document.getElementById(id);

  // Elementos da Home (podem não existir em outras páginas)
  const marcaSel   = $('marcas');
  const modeloSel  = $('modelos');
  const btnBuscar  = $('submeter_pesquisa');
  const tableCard  = $('tabela-veiculos-card');
  const tableBody  = $('tabela-veiculos-content');
  const graficoCard= $('grafico-veiculos-card');
  const canvas     = $('graficoAnoPreco');

  // Paginação (podem não existir se você não colou o bloco)
  const pager      = $('paginacao');
  const pageInfo   = $('pageInfo');
  const pageSizeEl = $('pageSize');
  const btnFirst   = $('btnFirst');
  const btnPrev    = $('btnPrev');
  const btnNext    = $('btnNext');
  const btnLast    = $('btnLast');

  // Se não é a Home, sai sem erro.
  if (!marcaSel || !modeloSel || !tableBody) return;

  // Estado de paginação
  let DATASET = [];
  let chartInstance = null;
  let currentPage = 1;
  let pageSize = (pageSizeEl && parseInt(pageSizeEl.value, 10)) || 10;

  // Marca → Modelos
  marcaSel.addEventListener('change', async () => {
    if (!modeloSel) return;
    const marcaCodigo = marcaSel.value;

    if (marcaCodigo === "0") {
      modeloSel.innerHTML = '<option selected value="0">-- Selecione um modelo --</option>';
      modeloSel.disabled = true;
      return;
    }

    try {
      const resp = await fetch('/marcas/' + encodeURIComponent(marcaCodigo) + '/modelos');
      const data = resp.ok ? await resp.json().catch(() => []) : [];
      modeloSel.innerHTML = '<option selected value="0">-- Selecione um modelo --</option>';
      data.forEach(m => {
        const opt = document.createElement('option');
        opt.value = m.codigo;
        opt.textContent = m.nome;
        modeloSel.appendChild(opt);
      });
      modeloSel.disabled = false;
    } catch (e) {
      console.error('Erro ao buscar modelos:', e);
      modeloSel.disabled = true;
    }
  });

  // Buscar
  if (btnBuscar) {
    btnBuscar.addEventListener('click', gerarTabelaFiltrada);
  }

  async function gerarTabelaFiltrada() {
    if (!tableCard || !graficoCard) return;

    const marcaCodigo  = marcaSel.value;
    const modeloCodigo = modeloSel.value;

    if (marcaCodigo === "0" || modeloCodigo === "0") {
      tableCard.style.display = "none";
      graficoCard.style.display = "none";
      if (pager) pager.style.display = "none";
      return;
    }

    try {
      const resp = await fetch('/veiculos_modelo/' + encodeURIComponent(modeloCodigo));
      const data = resp.ok ? await resp.json().catch(() => []) : [];
      DATASET = Array.isArray(data) ? data : [];
      currentPage = 1;

      if (pageSizeEl) pageSize = parseInt(pageSizeEl.value, 10) || 10;

      renderTablePage();
      renderChart(DATASET); // o gráfico usa todos os pontos
    } catch (e) {
      console.error('Erro ao buscar veículos:', e);
      tableCard.style.display = "none";
      graficoCard.style.display = "none";
      if (pager) pager.style.display = "none";
    }
  }

  function renderTablePage() {
    const total = DATASET.length;
    tableBody.innerHTML = "";

    if (!total) {
      tableCard.style.display = "none";
      if (pager) pager.style.display = "none";
      return;
    }

    const totalPages = Math.max(1, Math.ceil(total / pageSize));
    currentPage = Math.min(Math.max(1, currentPage), totalPages);

    const startIdx = (currentPage - 1) * pageSize;
    const endIdx   = Math.min(startIdx + pageSize, total);
    const slice    = DATASET.slice(startIdx, endIdx);

    slice.forEach(v => {
      const tr = document.createElement('tr');
      const valorFormatado = Number(v.valor || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
      tr.innerHTML = `
        <td>${v.codigoFipe ?? ''}</td>
        <td>${v.modelo?.nome ?? ''} - ${v.ano ?? ''}</td>
        <td>${valorFormatado}</td>
        <td>${v.combustivel ?? ''}</td>
      `;
      tableBody.appendChild(tr);
    });

    tableCard.style.display = "block";
    if (pager) {
      pager.style.display = "flex";
      if (pageInfo) pageInfo.textContent = `Exibindo ${startIdx + 1}-${endIdx} de ${total} • Página ${currentPage}/${totalPages}`;
      if (btnFirst) btnFirst.disabled = (currentPage <= 1);
      if (btnPrev)  btnPrev .disabled = (currentPage <= 1);
      if (btnLast)  btnLast .disabled = (currentPage >= totalPages);
      if (btnNext)  btnNext .disabled = (currentPage >= totalPages);
    }
  }

  function renderChart(dataset) {
    if (!canvas || !graficoCard) return;

    const anos   = [];
    const precos = [];
    dataset.forEach(v => {
      if (v.ano   != null) anos.push(v.ano);
      if (v.valor != null) precos.push(v.valor);
    });

    atualizarIndicadorTrend(precos.slice().reverse());
    const hasData = dataset.length > 0;
    graficoCard.style.display = hasData ? "block" : "none";
    if (!hasData) return;

    if (chartInstance) chartInstance.destroy();
    const ctx = canvas.getContext('2d');
    chartInstance = new Chart(ctx, {
      type: 'line',
      data: { labels: anos, datasets: [{ label: 'Preço (R$)', data: precos, fill: false, tension: 0.2 }] },
      options: { responsive: true, scales: { y: { beginAtZero: false } } }
    });
  }

  // Listeners de paginação – só se os elementos existem
  if (pageSizeEl) pageSizeEl.addEventListener('change', () => {
    pageSize = parseInt(pageSizeEl.value, 10) || 10;
    currentPage = 1;
    renderTablePage();
  });
  if (btnFirst) btnFirst.addEventListener('click', () => { currentPage = 1; renderTablePage(); });
  if (btnPrev ) btnPrev .addEventListener('click', () => { currentPage -= 1; renderTablePage(); });
  if (btnNext ) btnNext .addEventListener('click', () => { currentPage += 1; renderTablePage(); });
  if (btnLast ) btnLast .addEventListener('click', () => {
    const totalPages = Math.max(1, Math.ceil(DATASET.length / pageSize));
    currentPage = totalPages;
    renderTablePage();
  });

  function atualizarIndicadorTrend(valoresReverso) {
    const badge = $('trend-indicator');
    if (!badge || valoresReverso.length < 2) return;

    const atual    = valoresReverso[valoresReverso.length - 2];
    const anterior = valoresReverso[valoresReverso.length - 1];
    const diff = atual - anterior;
    const perc = (diff / (anterior || 1)) * 100;

    badge.classList.remove('bg-success','bg-danger','bg-secondary');
    badge.innerHTML = '';
    const icone = document.createElement('i'); icone.classList.add('me-1','fas');

    if (diff > 0) { badge.classList.add('bg-success'); icone.classList.add('fa-arrow-up'); }
    else if (diff < 0) { badge.classList.add('bg-danger'); icone.classList.add('fa-arrow-down'); }
    else { badge.classList.add('bg-secondary'); icone.classList.add('fa-minus'); }

    badge.appendChild(icone);
    badge.append(`${diff > 0 ? '+' : ''}${perc.toFixed(1)}%`);
  }
});
</script>
<% end %>
